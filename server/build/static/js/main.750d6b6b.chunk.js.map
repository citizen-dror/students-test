{"version":3,"sources":["components/MyCard.tsx","components/MySelect.tsx","services/citiesService.ts","services/studentsService.ts","services/utils.ts","components/StudentsForm.tsx","components/StudentsTable.tsx","App.js","reportWebVitals.js","index.js"],"names":["MyCard","children","header","style","cardHeader","className","MySelect","onChange","data","keyProp","valProp","isInvalid","value","Form","Control","as","map","item","getAll","a","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","response","ok","json","postStudent","student","sObj","JSON","stringify","body","macthHeb","str","match","formatDate","date","toSqlformat","month","getMonth","day","getDate","year","getFullYear","length","join","sqlDateToUiFormat","sqlDate","Date","sqlDateToDate","StudentsForm","useState","form","setForm","errors","setErrors","birthDate","setBirthDate","citisArr","setCitisArr","useEffect","CitiesService","then","undefined","unshift","city_id","city_name","setField","field","validateForm","first_name","last_name","israel_id","newErrors","parsed","parseInt","isNaN","macthInt","styles","div1","display","alignItems","justifyContent","card","width","Group","controlId","Label","type","e","target","Feedback","selected","pickBirthDate","birth_date","event","Button","variant","onClick","preventDefault","Object","keys","s","StudentsService","alert","StudentsTable","studentsArr","setStudentsArr","Table","striped","responsive","bordered","size","bdate","id","Home","App","to","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.750d6b6b.chunk.js","sourcesContent":["import React, { PropsWithChildren } from 'react'\r\n\r\ninterface SmallCard2Props extends PropsWithChildren<any> {\r\n   header?: string;\r\n   style?: any;\r\n}\r\n\r\nconst MyCard: React.FC<SmallCard2Props> = ({ children, header, style }) => {\r\n   const cardHeader = header ? <> <h6>{header}</h6> <hr /> </> : null;\r\n   return (\r\n      <div\r\n         style={style}\r\n         className=\" p-3 bg-white rounded shadow\">\r\n         {cardHeader}\r\n         {children}\r\n      </div>\r\n   )\r\n}\r\nexport default MyCard","import React from 'react'\r\nimport Form from 'react-bootstrap/Form';\r\n\r\ninterface Props {\r\n   data: any[]\r\n   onChange: (event: React.ChangeEvent<HTMLSelectElement>) => void,\r\n   keyProp: string\r\n   valProp: string\r\n   isInvalid: boolean,\r\n   value?: string\r\n}\r\n\r\nconst MySelect: React.FC<Props> = ({ onChange, data, keyProp, valProp, isInvalid, value }) => {\r\n   return (\r\n      <Form.Control as=\"select\"\r\n         onChange={onChange}\r\n         value={value}\r\n         isInvalid={isInvalid}\r\n      >\r\n         {data.map((item) => {\r\n            return <option\r\n               key={item[keyProp]}\r\n               value={item[keyProp]}>\r\n               {item[valProp]}\r\n            </option>\r\n         })}\r\n      </Form.Control>\r\n   )\r\n}\r\n\r\nexport default MySelect;\r\n","class CitiesService {\r\n  public getAll = async (): Promise<Array<any> | undefined> => {\r\n    // Default options are marked with *\r\n    let url = '/api/v1/cities/';\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      mode: 'cors', // no-cors, *cors, same-origin\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'same-origin', // include, *same-origin, omit\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      redirect: 'follow', // manual, *follow, error\r\n      referrerPolicy: 'no-referrer', // no-referrer, *client\r\n    });\r\n    if (!response.ok) {\r\n      return [];\r\n    }\r\n    return response.json(); // parses JSON response into native JavaScript objects\r\n  };\r\n  \r\n}\r\nexport default new CitiesService();\r\n\r\n","import {Student} from '../interfaces/student.interface';\r\n\r\nclass StudentsService {\r\n  public getAll = async (): Promise<Array<any> | undefined> => {\r\n    // Default options are marked with *\r\n    let url = '/api/v1/students/';\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      mode: 'cors', // no-cors, *cors, same-origin\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'same-origin', // include, *same-origin, omit\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      redirect: 'follow', // manual, *follow, error\r\n      referrerPolicy: 'no-referrer', // no-referrer, *client\r\n    });\r\n    if (!response.ok) {\r\n      return [];\r\n    }\r\n    return response.json(); // parses JSON response into native JavaScript objects\r\n  };\r\n\r\n  public postStudent = async (student: Student): Promise<Array<any> | undefined> => {\r\n    // Default options are marked with *\r\n    const url = '/api/v1/students/add';\r\n    const sObj = JSON.stringify(student);\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      mode: 'cors', // no-cors, *cors, same-origin\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'same-origin', // include, *same-origin, omit\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      redirect: 'follow', // manual, *follow, error\r\n      referrerPolicy: 'no-referrer', // no-referrer, *client\r\n      body: sObj,\r\n    });\r\n    if (!response.ok) {\r\n      return [];\r\n    }\r\n    return response.json(); // parses JSON response into native JavaScript objects\r\n  };\r\n}\r\nexport default new StudentsService();\r\n\r\n","export const macthHeb = (str: string) => {\r\n    return (str.match(/^[-\\u0590-\\u05FF]+$/))\r\n}\r\nexport const macthInt = (str: string) => {\r\n    const parsed = parseInt(str, 10);\r\n    return (!isNaN(parsed));\r\n}\r\n/**\r\n * convert YYYY-MM-DD string to date \r\n * @param sqlDate \r\n * @returns \r\n */\r\nexport const sqlDateToDate = (sqlDate: string) => {\r\n    const res = new Date(sqlDate);\r\n    return res;\r\n}\r\n/**\r\n * foramt date to formated string\r\n * @param date \r\n * @param toSqlformat convert to YYYY-MM-DD if true, and to DD/MM/YYYY if false \r\n * @returns \r\n */\r\nexport const formatDate = (date: Date, toSqlformat: boolean) => {\r\n    let month = '' + (date.getMonth() + 1);\r\n    let day = '' + date.getDate();\r\n    const year = date.getFullYear();\r\n    if (month.length < 2)\r\n        month = '0' + month;\r\n    if (day.length < 2)\r\n        day = '0' + day;\r\n    if (toSqlformat)\r\n        return [year, month, day].join('-');\r\n    else\r\n        return [day, month, year].join('/');\r\n}\r\n\r\n/**\r\n * convert sql date string foramt to ui date format\r\n * @param sqlDate YYYY-MM-DD foramt\r\n * @returns DD/MM/YYYY format\r\n */\r\nexport const sqlDateToUiFormat =(sqlDate: string) =>{\r\n    const date = sqlDateToDate(sqlDate);\r\n    return formatDate(date, false);\r\n}","import React, { useState, useEffect, ChangeEvent } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport MyCard from './MyCard';\r\nimport MySelect from './MySelect';\r\nimport CitiesService from '../services/citiesService';\r\nimport StudentsService from '../services/studentsService';\r\nimport { macthHeb, macthInt, formatDate } from '../services/utils';\r\nimport { Student } from '../interfaces/student.interface';\r\n\r\nconst StudentsForm: React.FC<{}> = () => {\r\n    //const [ firstName, setFirstName ] = useState('');\r\n    const [form, setForm] = useState({} as Student);\r\n    const [errors, setErrors] = useState({} as Student);\r\n    const [birthDate, setBirthDate] = useState(new Date());\r\n    const [citisArr, setCitisArr] = useState([] as any[]);\r\n\r\n    useEffect(() => {\r\n        CitiesService.getAll()\r\n            .then((data: any[] | undefined) => {\r\n                if (data !== null && data !== undefined) {\r\n                    data.unshift({\r\n                        city_id: 0,\r\n                        city_name: \"בחר עיר\"\r\n                    })\r\n                    setCitisArr(data);\r\n                }\r\n            });\r\n    }, []);\r\n\r\n    const setField = (field: any, value: any) => {\r\n        setForm({\r\n            ...form,\r\n            [field]: value\r\n        })\r\n        // clean error object\r\n        const felErr = (errors as any)[field];\r\n        if (!!felErr) setErrors({\r\n            ...errors,\r\n            [field]: null\r\n        })\r\n    };\r\n\r\n    const onSelectCity = (event: ChangeEvent<HTMLSelectElement>) => {\r\n        setField('city_id', event.target.value);\r\n    };\r\n    const pickBirthDate = (date: Date | null | [Date, Date]) => {\r\n        if (date && date instanceof Date) {\r\n            setBirthDate(date);\r\n        }\r\n    }\r\n    const validateForm = () => {\r\n        const { first_name, last_name, israel_id, city_id } = form;\r\n        const newErrors = {} as Student;\r\n        // firstName errors\r\n        if (!first_name || first_name === '') newErrors.first_name = 'First Name cannot be blank!';\r\n        else if (!macthHeb(first_name)) newErrors.first_name = 'First Name should be in hebrew!'\r\n        else if (first_name.length > 20) newErrors.first_name = 'First Name is too long!'\r\n\r\n        // lastName errors\r\n        if (!last_name || last_name === '') newErrors.last_name = 'Last Name cannot be blank!';\r\n        else if (!macthHeb(last_name)) newErrors.last_name = 'Last Name should be in hebrew!';\r\n        else if (last_name.length > 20) newErrors.last_name = 'Last Name is too long!'\r\n\r\n        // id errors\r\n        if (!israel_id) newErrors.israel_id = 'ID cannotbe blank!'\r\n        else if (!macthInt(israel_id)) newErrors.last_name = 'ID should conatin digits';\r\n        else if (israel_id.length !== 9) newErrors.israel_id = 'ID must have 9 digits';\r\n\r\n        // city_id errors\r\n        if (!city_id || city_id === '0') newErrors.city_id = 'Please Pick a City!'\r\n        return newErrors\r\n    }\r\n    const handleSubmit = (e: any) => {\r\n        e.preventDefault()\r\n        // get our new errors\r\n        const newErrors = validateForm()\r\n        // Conditional logic:\r\n        if (Object.keys(newErrors).length > 0) {\r\n            // We got errors!\r\n            setErrors(newErrors)\r\n        } else {\r\n            const { first_name, last_name, israel_id, city_id } = form;\r\n            const birth_date = formatDate(birthDate, true);\r\n            const s: Student = {\r\n                first_name: first_name,\r\n                last_name: last_name,\r\n                israel_id: israel_id,\r\n                birth_date: birth_date,\r\n                city_id: city_id\r\n            };\r\n            StudentsService.postStudent(s);\r\n            alert('Thank you for your feedback!')\r\n        }\r\n    }\r\n    const styles = {\r\n        div1: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center'\r\n        },\r\n        card: {\r\n            width: 400,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center'\r\n        }\r\n    }\r\n    return (\r\n        <div style={styles.div1}>\r\n            <MyCard style={styles.card}>\r\n                <Form>\r\n                    <Form.Group controlId=\"studentsForm.first_name\">\r\n                        <Form.Label>First Name: </Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={e => setField('first_name', e.target.value)}\r\n                            isInvalid={!!errors.first_name}\r\n                        />\r\n                        <Form.Control.Feedback type='invalid'>\r\n                            {errors.first_name}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"studentsForm.last_name\">\r\n                        <Form.Label>Last Name: </Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={e => setField('last_name', e.target.value)}\r\n                            isInvalid={!!errors.last_name}\r\n                        />\r\n                        <Form.Control.Feedback type='invalid'>\r\n                            {errors.last_name}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"studentsForm.dateBirth\">\r\n                        <Form.Label>Date Of Birth: </Form.Label>\r\n                        <br />\r\n                        <DatePicker\r\n                            className=\"form-control\"\r\n                            selected={birthDate}\r\n                            onChange={date => pickBirthDate(date)}\r\n                        />\r\n                        <Form.Control.Feedback type='invalid'>\r\n                            {errors.birth_date}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"studentsForm.israel_id\">\r\n                        <Form.Label>Israel ID: </Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={e => setField('israel_id', e.target.value)}\r\n                            isInvalid={!!errors.israel_id}\r\n                        />\r\n                        <Form.Control.Feedback type='invalid'>\r\n                            {errors.israel_id}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"studentsForm.city_id\">\r\n                        <Form.Label>City: </Form.Label>\r\n                        <MySelect\r\n                            data={citisArr}\r\n                            keyProp='city_id' valProp='city_name'\r\n                            onChange={onSelectCity}\r\n                            isInvalid={!!errors.city_id}\r\n                        />\r\n                        <Form.Control.Feedback type='invalid'>\r\n                            {errors.city_id}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Button variant=\"primary\" onClick={handleSubmit}>Save</Button>{' '}\r\n                </Form>\r\n            </MyCard>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StudentsForm;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport MyCard from './MyCard';\r\nimport StudentsService from '../services/studentsService';\r\nimport {sqlDateToUiFormat} from '../services/utils';\r\n\r\nconst StudentsTable: React.FC<{}> = () => {\r\n    const [studentsArr, setStudentsArr] = useState([] as any[]);\r\n    useEffect(() => {\r\n        StudentsService.getAll()\r\n            .then((data: any[] | undefined) => {\r\n                if (data !== null && data !== undefined) {\r\n                    setStudentsArr(data);\r\n                }\r\n            });\r\n    }, []);\r\n    return (\r\n        <MyCard>\r\n            <Table striped responsive bordered size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>First Name</th>\r\n                        <th>Last Name</th>\r\n                        <th>Birth Date</th>\r\n                        <th>Id</th>\r\n                        <th>City</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {studentsArr.map((item) => {\r\n                        const bdate = sqlDateToUiFormat(item.birth_date);\r\n                        return <tr key={item.id}>\r\n                            <td>{item.id}</td>\r\n                            <td>{item.first_name}</td>\r\n                            <td>{item.last_name}</td>\r\n                            <td>{bdate}</td>\r\n                            <td>{item.israel_id}</td>\r\n                            <td>{item.city_name}</td>\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        </MyCard>\r\n    )\r\n}\r\n\r\nexport default StudentsTable;\r\n","import './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport StudentsForm from './components/StudentsForm.tsx';\r\nimport StudentsTable from './components/StudentsTable.tsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <div>\r\n          <nav>\r\n            <ul>\r\n              <li>\r\n                <Link to=\"/\">Home</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/form\">Students Form</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/table\">Students Table</Link>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n\r\n          {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n          <Switch>\r\n            <Route path=\"/form\">\r\n              <StudentsForm />\r\n            </Route>\r\n            <Route path=\"/table\">\r\n              <StudentsTable />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\nfunction Home() {\r\n  return <h2>Home</h2>;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}